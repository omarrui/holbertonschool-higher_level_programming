The ``1-my_list`` module
======================
Using ``MyList``
----------------
This is an example text file in reStructuredText format. First import
``MyList`` from the ``1-my_list`` module:
    >>> MyList = __import__('1-my_list').MyList

Now use it:

Basic functionality:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test with empty list:
    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

Test with negative numbers:
    >>> neg_list = MyList()
    >>> neg_list.append(-1)
    >>> neg_list.append(-5)
    >>> neg_list.append(3)
    >>> neg_list.append(-2)
    >>> neg_list.print_sorted()
    [-5, -2, -1, 3]

Test with duplicate numbers:
    >>> dup_list = MyList()
    >>> dup_list.append(3)
    >>> dup_list.append(1)
    >>> dup_list.append(3)
    >>> dup_list.append(1)
    >>> dup_list.print_sorted()
    [1, 1, 3, 3]

Test with single element:
    >>> single_list = MyList()
    >>> single_list.append(42)
    >>> single_list.print_sorted()
    [42]

Test with strings:
    >>> str_list = MyList()
    >>> str_list.append("banana")
    >>> str_list.append("apple")
    >>> str_list.append("cherry")
    >>> str_list.print_sorted()
    ['apple', 'banana', 'cherry']

Test inheritance from list:
    >>> my_list2 = MyList([4, 1, 3, 2])
    >>> my_list2.print_sorted()
    [1, 2, 3, 4]
    >>> print(my_list2)
    [4, 1, 3, 2]

Test that MyList is a subclass of list:
    >>> issubclass(MyList, list)
    True

Test that instance is of type MyList and list:
    >>> my_list3 = MyList()
    >>> type(my_list3) == MyList
    True
    >>> isinstance(my_list3, list)
    True

Test list methods work:
    >>> my_list4 = MyList([1, 2, 3])
    >>> my_list4.extend([4, 5])
    >>> my_list4.print_sorted()
    [1, 2, 3, 4, 5]
    >>> my_list4.pop()
    5
    >>> my_list4.print_sorted()
    [1, 2, 3, 4]

Test with floats:
    >>> float_list = MyList()
    >>> float_list.append(3.14)
    >>> float_list.append(2.71)
    >>> float_list.append(1.41)
    >>> float_list.print_sorted()
    [1.41, 2.71, 3.14]

Test original list is not modified:
    >>> original = MyList([5, 2, 8, 1])
    >>> original.print_sorted()
    [1, 2, 5, 8]
    >>> original[0]
    5
    >>> original[-1]
    1

Test with mixed integers and floats:
    >>> mixed_list = MyList()
    >>> mixed_list.append(3)
    >>> mixed_list.append(2.5)
    >>> mixed_list.append(1)
    >>> mixed_list.append(4.7)
    >>> mixed_list.print_sorted()
    [1, 2.5, 3, 4.7]

Test very large numbers:
    >>> large_list = MyList()
    >>> large_list.append(999999999)
    >>> large_list.append(1)
    >>> large_list.append(888888888)
    >>> large_list.print_sorted()
    [1, 888888888, 999999999]

The ``7-base_geometry`` module
======================
Using ``BaseGeometry``
-------------------
Importing the class from the module:
    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
Checking for module docstring:
    >>> m = __import__("7-base_geometry").__doc__
    >>> len(m) > 1
    True
Checking for class docstring:
    >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(c) > 1
    True
Checking for area method docstring:
    >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
    >>> len(mod1) > 1
    True
Checking for integer_validator method docstring:
    >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> len(mod2) > 1
    True
Checking for area method:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented
Testing integer_validator with valid inputs:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
Testing integer_validator with zero:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0
Testing integer_validator with negative number:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0
Testing integer_validator with string:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with boolean True:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with boolean False:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", False)
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with None:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with float:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 3.14)
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with list:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", [3])
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with tuple:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", (4,))
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with dict:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", {3, 4})
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing integer_validator with no args:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
Testing integer_validator with one arg:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'
Testing integer_validator with more than 2 args:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 1, 2)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given
Testing area with args:
    >>> bg = BaseGeometry()
    >>> bg.area(5)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given
Testing large integer:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("big", 999999999999999999999999)
Testing complex number:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", complex(1))
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing infinity:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", float('inf'))
    Traceback (most recent call last):
    TypeError: name must be an integer
Testing NaN:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", float('nan'))
    Traceback (most recent call last):
    TypeError: name must be an integer
