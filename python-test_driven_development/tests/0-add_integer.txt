Test for 0-add_integer module
=============================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
-----

``add_integer()`` returns the addition of its arguments. For numbers,
that value is equivalent to using the ``+`` operator.

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

    >>> add_integer(100, -2)
    98

With default value:

    >>> add_integer(2)
    100

Floats are cast to integers:

    >>> add_integer(100.3, -2)
    98

    >>> add_integer(2.9, 0.2)
    2

Non-Numbers
-----------

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Infinity and NaN
----------------

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    TypeError: b must be an integer